name: tests

on:
  workflow_call:

env:
  GRADLE_OPTS: -Dorg.gradle.jvmargs="-XX:MaxMetaspaceSize=2g"

jobs:
  unit:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java: [ 8, 11, 17, 19 ]
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK ${{ matrix.java }}
        if: matrix.java != 8
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: temurin

      # additional JDK for sonar deps which requires at least JDK 11
      # due to composite builds, it's pretty much impossible to skip
      - name: Set up multiple JDKs
        if: matrix.java == 8
        uses: actions/setup-java@v3
        with:
          java-version: |
            19
            ${{ matrix.java }}
          distribution: temurin

      # gradle-build-action already does the caching
      - name: Setup gradle
        uses: gradle/gradle-build-action@v2
        env:
          ORG_GRADLE_PROJECT_kipher.toolchain.compilerVersion: ${{ matrix.java }}

      - name: Test with JDK ${{ matrix.java }} on Windows
        if: matrix.os == 'windows-latest'
        run: ./gradlew clean test --stacktrace --no-daemon --no-parallel

      - name: Test with JDK ${{ matrix.java }}
        if: matrix.os != 'windows-latest' && matrix.java != 8
        run: ./gradlew clean test --stacktrace

      - name: Test with JDK 8 (sonar support)
        if: matrix.os != 'windows-latest' && matrix.java == 8
        run: |
          JAVA_HOME=${{ env.JAVA_HOME_19_X64 }} ./gradlew build
          JAVA_HOME=${{ env.JAVA_HOME_8_X64 }} ./gradlew test --stacktrace

      # upload only one aggregated coverage report
      - name: Upload test coverage
        if: matrix.os == 'ubuntu-latest' && matrix.java == 19
        uses: actions/upload-artifact@v3
        with:
          name: coverage-file
          path: ./kipher-coverage/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml

  # uploads the aggregated coverage report
  upload:
    needs: [ unit ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: coverage-file
          path: ./coverage/

      - name: Codecov report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/testCodeCoverageReport.xml
          flags: unittests
